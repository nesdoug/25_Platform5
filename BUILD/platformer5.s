;
; File generated by cc65 v 2.18 - Git c0a873e
;
	.fopt		compiler,"cc65 v 2.18 - Git c0a873e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_music_play
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_spr
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_set_music_speed
	.import		_check_collision
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.import		_color_emphasis
	.export		_RoundSprL
	.export		_RoundSprR
	.export		_CoinSpr
	.export		_EnemySpr
	.export		_CoinsSpr
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_index2
	.export		_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_L_R_switch
	.export		_old_x
	.export		_temp_x
	.export		_temp_y
	.export		_song
	.export		_game_mode
	.export		_coins
	.export		_pointer
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_Generic2
	.export		_BoxGuy1
	.export		_coin_x
	.export		_coin_y
	.export		_coin_active
	.export		_coin_room
	.export		_coin_actual_x
	.export		_enemy_x
	.export		_enemy_y
	.export		_enemy_active
	.export		_enemy_room
	.export		_enemy_actual_x
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles1
	.export		_is_solid
	.export		_Room1
	.export		_Room2
	.export		_Room3
	.export		_Room4
	.export		_Room5
	.export		_Rooms
	.export		_level_1_coins
	.export		_level_1_enemies
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision
	.export		_draw_screen_R
	.export		_new_cmap
	.export		_bg_collision_sub
	.export		_bg_check_low
	.export		_get_position
	.export		_enemy_moves
	.export		_sprite_collisions
	.export		_check_spr_objects
	.export		_sprite_obj_init
	.export		_main

.segment	"DATA"

_BoxGuy1:
	.word	$4000
	.word	$C400
	.res	4,$00

.segment	"RODATA"

_RoundSprL:
	.byte	$FF
	.byte	$FC
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$FC
	.byte	$03
	.byte	$00
	.byte	$FF
	.byte	$04
	.byte	$12
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$13
	.byte	$00
	.byte	$80
_RoundSprR:
	.byte	$FF
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$FC
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$11
	.byte	$00
	.byte	$80
_CoinSpr:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$01
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$01
	.byte	$80
_EnemySpr:
	.byte	$FF
	.byte	$FF
	.byte	$04
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$05
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$14
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$02
	.byte	$80
_CoinsSpr:
	.byte	$00
	.byte	$00
	.byte	$FA
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$FB
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$FC
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$FD
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$FE
	.byte	$03
	.byte	$80
_palette_bg:
	.byte	$22
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$39
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$0A
	.byte	$1A
	.byte	$2A
_palette_sp:
	.byte	$22
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$22
	.byte	$17
	.byte	$28
	.byte	$38
	.byte	$22
	.byte	$05
	.byte	$15
	.byte	$35
	.byte	$22
	.byte	$0F
	.byte	$00
	.byte	$30
_metatiles1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$06
	.byte	$06
	.byte	$16
	.byte	$16
	.byte	$01
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$01
	.byte	$15
	.byte	$16
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$01
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$19
	.byte	$19
	.byte	$01
	.byte	$09
	.byte	$0A
	.byte	$19
	.byte	$1A
	.byte	$01
_is_solid:
	.byte	$00
	.byte	$80
	.byte	$C0
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_Room1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Room2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Room3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$06
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Room4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Room5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Rooms:
	.addr	_Room1
	.addr	_Room2
	.addr	_Room3
	.addr	_Room4
	.addr	_Room5
_level_1_coins:
	.byte	$61
	.byte	$00
	.byte	$65
	.byte	$81
	.byte	$01
	.byte	$85
	.byte	$41
	.byte	$02
	.byte	$95
	.byte	$61
	.byte	$03
	.byte	$75
	.byte	$41
	.byte	$04
	.byte	$85
	.byte	$FF
_level_1_enemies:
	.byte	$C2
	.byte	$00
	.byte	$B0
	.byte	$C2
	.byte	$01
	.byte	$80
	.byte	$C2
	.byte	$02
	.byte	$C0
	.byte	$C2
	.byte	$03
	.byte	$F0
	.byte	$FF

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_direction:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_index2:
	.res	1,$00
_room:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_song:
	.res	1,$00
_game_mode:
	.res	1,$00
_coins:
	.res	1,$00
_pointer:
	.res	2,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00
_Generic2:
	.res	4,$00
_coin_x:
	.res	16,$00
_coin_y:
	.res	16,$00
_coin_active:
	.res	16,$00
_coin_room:
	.res	16,$00
_coin_actual_x:
	.res	16,$00
_enemy_x:
	.res	16,$00
_enemy_y:
	.res	16,$00
_enemy_active:
	.res	16,$00
_enemy_room:
	.res	16,$00
_enemy_actual_x:
	.res	16,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; set_data_pointer(Rooms[0]);
;
	lda     _Rooms
	ldx     _Rooms+1
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles1); 
;
	lda     #<(_metatiles1)
	ldx     #>(_metatiles1)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L09AF:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L09AE:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L09B1
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L09AE
;
; if (y == 0xe0) break;
;
L09B1:	lda     _y
	cmp     #$E0
	beq     L05ED
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L09AF
;
; set_data_pointer(Rooms[1]);
;
L05ED:	lda     _Rooms+2
	ldx     _Rooms+2+1
	jsr     _set_data_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L09B0:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (y == 0xe0) break;
;
	lda     _y
	cmp     #$E0
	beq     L0611
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L09B0
;
; memcpy (c_map, Rooms[0], 240);
;
L0611:	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	lda     _Rooms
	ldx     _Rooms+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; sprite_obj_init();
;
	jmp     _sprite_obj_init

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; if(direction == LEFT) {
;
	lda     _direction
	bne     L0630
;
; oam_meta_spr(high_byte(BoxGuy1.x), high_byte(BoxGuy1.y), RoundSprL);
;
	jsr     decsp2
	lda     _BoxGuy1+1
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+3
	dey
	sta     (sp),y
	lda     #<(_RoundSprL)
	ldx     #>(_RoundSprL)
;
; else{
;
	jmp     L09B2
;
; oam_meta_spr(high_byte(BoxGuy1.x), high_byte(BoxGuy1.y), RoundSprR);
;
L0630:	jsr     decsp2
	lda     _BoxGuy1+1
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+3
	dey
	sta     (sp),y
	lda     #<(_RoundSprR)
	ldx     #>(_RoundSprR)
L09B2:	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_COINS; ++index){
;
	lda     #$00
	sta     _index
L09B3:	lda     _index
	cmp     #$10
	bcs     L09B8
;
; temp_y = coin_y[index];
;
	ldy     _index
	lda     _coin_y,y
	sta     _temp_y
;
; if(temp_y == TURN_OFF) continue;
;
	cmp     #$FF
	beq     L09B7
;
; if(get_frame_count() & 8) ++temp_y; // bounce the coin
;
	jsr     _get_frame_count
	and     #$08
	beq     L064D
	inc     _temp_y
;
; temp1 = coin_active[index];
;
L064D:	ldy     _index
	lda     _coin_active,y
	sta     _temp1
;
; temp2 = coin_x[index];
;
	ldy     _index
	lda     _coin_x,y
	sta     _temp2
;
; if(temp1 && (temp_y < 0xf0)) {
;
	lda     _temp1
	beq     L09B7
	lda     _temp_y
	cmp     #$F0
	bcs     L09B7
;
; oam_meta_spr(temp2, temp_y, CoinSpr);
;
	jsr     decsp2
	lda     _temp2
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_CoinSpr)
	ldx     #>(_CoinSpr)
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_COINS; ++index){
;
L09B7:	inc     _index
	jmp     L09B3
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L09B8:	lda     #$00
	sta     _index
L09B9:	lda     _index
	cmp     #$10
	bcs     L0662
;
; temp_y = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _temp_y
;
; if(temp_y == TURN_OFF) continue;
;
	cmp     #$FF
	beq     L09BD
;
; temp1 = enemy_active[index];
;
	ldy     _index
	lda     _enemy_active,y
	sta     _temp1
;
; temp2 = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _temp2
;
; if(temp2 > 0xf0) continue;
;
	cmp     #$F1
	bcs     L09BD
;
; if(temp1 && (temp_y < 0xf0)) {
;
	lda     _temp1
	beq     L09BD
	lda     _temp_y
	cmp     #$F0
	bcs     L09BD
;
; oam_meta_spr(temp2, temp_y, EnemySpr);
;
	jsr     decsp2
	lda     _temp2
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_EnemySpr)
	ldx     #>(_EnemySpr)
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L09BD:	inc     _index
	jmp     L09B9
;
; oam_meta_spr(16,16, CoinsSpr);
;
L0662:	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(_CoinsSpr)
	ldx     #>(_CoinsSpr)
	jsr     _oam_meta_spr
;
; temp1 = coins + 0xf0;
;
	lda     _coins
	clc
	adc     #$F0
	sta     _temp1
;
; oam_spr(64,16,temp1,3);
;
	jsr     decsp3
	lda     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$03
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = BoxGuy1.x;
;
	lda     _BoxGuy1
	sta     _old_x
;
; if(pad1 & PAD_LEFT){
;
	lda     _pad1
	and     #$02
	beq     L09C1
;
; direction = LEFT;
;
	lda     #$00
	sta     _direction
;
; if(BoxGuy1.x <= 0x100) {
;
	lda     _BoxGuy1+1
	cmp     #$01
	bne     L0697
	lda     _BoxGuy1
	cmp     #$01
L0697:	bcs     L0695
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; BoxGuy1.x = 0x100;
;
	ldx     #$01
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; else if(BoxGuy1.x < 0x400) { // don't want to wrap around to the other side
;
	jmp     L06C5
L0695:	ldx     _BoxGuy1+1
	cpx     #$04
	bcs     L069D
;
; BoxGuy1.vel_x = -0x100;
;
	ldx     #$FF
	lda     #$00
;
; else {
;
	jmp     L09C3
;
; BoxGuy1.vel_x -= ACCEL;
;
L069D:	lda     _BoxGuy1+4
	sec
	sbc     #$30
	sta     _BoxGuy1+4
	bcs     L06A4
	dec     _BoxGuy1+4+1
;
; if(BoxGuy1.vel_x < -MAX_SPEED) BoxGuy1.vel_x = -MAX_SPEED;
;
L06A4:	lda     _BoxGuy1+4
	cmp     #$C0
	lda     _BoxGuy1+4+1
	sbc     #$FD
	bvc     L06A7
	eor     #$80
L06A7:	jpl     L06C5
	ldx     #$FD
	lda     #$C0
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L09C3
L09C1:	lda     _pad1
	and     #$01
	beq     L06AB
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; BoxGuy1.vel_x += ACCEL;
;
	lda     #$30
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L06B1
	inc     _BoxGuy1+4+1
;
; if(BoxGuy1.vel_x > MAX_SPEED) BoxGuy1.vel_x = MAX_SPEED;
;
L06B1:	lda     _BoxGuy1+4
	cmp     #$41
	lda     _BoxGuy1+4+1
	sbc     #$02
	bvs     L06B4
	eor     #$80
L06B4:	bpl     L06C5
	ldx     #$02
	lda     #$40
;
; else { // nothing pressed
;
	jmp     L09C3
;
; if(BoxGuy1.vel_x >= 0x100) BoxGuy1.vel_x -= ACCEL;
;
L06AB:	lda     _BoxGuy1+4
	cmp     #$00
	lda     _BoxGuy1+4+1
	sbc     #$01
	bvs     L06BA
	eor     #$80
L06BA:	bpl     L06B8
	lda     _BoxGuy1+4
	sec
	sbc     #$30
	sta     _BoxGuy1+4
	bcs     L06C5
	dec     _BoxGuy1+4+1
;
; else if(BoxGuy1.vel_x < -0x100) BoxGuy1.vel_x += ACCEL;
;
	jmp     L06C5
L06B8:	lda     _BoxGuy1+4
	cmp     #$00
	lda     _BoxGuy1+4+1
	sbc     #$FF
	bvc     L06C1
	eor     #$80
L06C1:	asl     a
	lda     #$00
	tax
	bcc     L09C3
	lda     #$30
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L06C5
	inc     _BoxGuy1+4+1
;
; else BoxGuy1.vel_x = 0;
;
	jmp     L06C5
L09C3:	sta     _BoxGuy1+4
	stx     _BoxGuy1+4+1
;
; BoxGuy1.x += BoxGuy1.vel_x;
;
L06C5:	lda     _BoxGuy1+4
	clc
	adc     _BoxGuy1
	sta     _BoxGuy1
	lda     _BoxGuy1+4+1
	adc     _BoxGuy1+1
	sta     _BoxGuy1+1
;
; if(BoxGuy1.x > 0xf800) { // make sure no wrap around to the other side
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F8
	bcc     L09C4
;
; BoxGuy1.x = 0x100;
;
	ldx     #$01
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; L_R_switch = 1; // shinks the y values in bg_coll, less problems with head / feet collisions
;
L09C4:	lda     #$01
	sta     _L_R_switch
;
; Generic.x = high_byte(BoxGuy1.x); // this is much faster than passing a pointer to BoxGuy1
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	lda     #$0B
	sta     _Generic+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_R && collision_L){ // if both true, probably half stuck in a wall
;
	lda     _collision_R
	beq     L06DD
	lda     _collision_L
	beq     L06DD
;
; BoxGuy1.x = old_x;
;
	ldx     #$00
	lda     _old_x
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	txa
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; else if(collision_L) {
;
	jmp     L06EF
L06DD:	lda     _collision_L
	beq     L06E6
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_L;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_L
;
; else if(collision_R) {
;
	jmp     L09C8
L06E6:	lda     _collision_R
	beq     L06EF
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_R;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_R
L09C8:	sta     _BoxGuy1+1
;
; if(BoxGuy1.vel_y < 0x300){
;
L06EF:	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$03
	bvc     L06F9
	eor     #$80
L06F9:	bpl     L06F7
;
; BoxGuy1.vel_y += GRAVITY;
;
	lda     #$50
	clc
	adc     _BoxGuy1+6
	sta     _BoxGuy1+6
	bcc     L06FD
	inc     _BoxGuy1+6+1
;
; else{
;
	jmp     L06FD
;
; BoxGuy1.vel_y = 0x300; // consistent
;
L06F7:	ldx     #$03
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; BoxGuy1.y += BoxGuy1.vel_y;
;
L06FD:	lda     _BoxGuy1+6
	clc
	adc     _BoxGuy1+2
	sta     _BoxGuy1+2
	lda     _BoxGuy1+6+1
	adc     _BoxGuy1+2+1
	sta     _BoxGuy1+2+1
;
; L_R_switch = 0;
;
	lda     #$00
	sta     _L_R_switch
;
; Generic.x = high_byte(BoxGuy1.x); // the rest should be the same
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_U) {
;
	lda     _collision_U
	beq     L070B
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_U;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_U
	sta     _BoxGuy1+3
;
; else if(collision_D) {
;
	jmp     L09C9
L070B:	lda     _collision_D
	beq     L09C5
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_D;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_D
	sta     _BoxGuy1+3
;
; BoxGuy1.y &= 0xff00;
;
	ldx     _BoxGuy1+2+1
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; if(BoxGuy1.vel_y > 0) {
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L071E
	eor     #$80
L071E:	bpl     L09C5
;
; BoxGuy1.vel_y = 0;
;
L09C9:	lda     #$00
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; Generic.y = high_byte(BoxGuy1.y); // the rest should be the same
;
L09C5:	lda     _BoxGuy1+3
	sta     _Generic+1
;
; bg_check_low();
;
	jsr     _bg_check_low
;
; if(collision_D) {
;
	lda     _collision_D
	beq     L0727
;
; if(pad1_new & PAD_A) {
;
	lda     _pad1_new
	and     #$80
	beq     L0727
;
; BoxGuy1.vel_y = JUMP_VEL; // JUMP
;
	ldx     #$FA
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; sfx_play(SFX_JUMP, 0);
;
	jsr     pusha
	jsr     _sfx_play
;
; if((scroll_x & 0xff) < 4){
;
L0727:	lda     _scroll_x
	cmp     #$04
	bcs     L072E
;
; new_cmap();
;
	jsr     _new_cmap
;
; temp5 = BoxGuy1.x;
;
L072E:	lda     _BoxGuy1+1
	sta     _temp5+1
	lda     _BoxGuy1
	sta     _temp5
;
; if (BoxGuy1.x > MAX_RIGHT){
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$B0
	bcc     L0735
;
; temp1 = (BoxGuy1.x - MAX_RIGHT) >> 8;
;
	lda     _BoxGuy1+1
	sec
	sbc     #$B0
	sta     _temp1
;
; scroll_x += temp1;
;
	clc
	adc     _scroll_x
	sta     _scroll_x
	lda     #$00
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - temp1;
;
	lda     _BoxGuy1+1
	sec
	sbc     _temp1
	sta     _BoxGuy1+1
;
; if(scroll_x >= MAX_SCROLL) {
;
L0735:	lda     _scroll_x
	cmp     #$FF
	lda     _scroll_x+1
	sbc     #$03
	bcc     L074A
;
; scroll_x = MAX_SCROLL; // stop scrolling right, end of level
;
	ldx     #$03
	lda     #$FF
	sta     _scroll_x
	stx     _scroll_x+1
;
; BoxGuy1.x = temp5; // but allow the x position to go all the way right
;
	lda     _temp5+1
	sta     _BoxGuy1+1
	lda     _temp5
	sta     _BoxGuy1
;
; if(high_byte(BoxGuy1.x) >= 0xf1) {
;
	lda     _BoxGuy1+1
	cmp     #$F1
	bcc     L074A
;
; BoxGuy1.x = 0xf100;
;
	ldx     #$F1
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; } 
;
L074A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; if(Generic.y >= 0xf0) return;
;
	lda     _Generic+1
	cmp     #$F0
	bcc     L09D1
;
; }
;
	rts
;
; temp6 = temp5 = Generic.x + scroll_x; // upper left (temp6 = save for reuse)
;
L09D1:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	sta     _temp5
	stx     _temp5+1
	sta     _temp6
	stx     _temp6+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; eject_L = temp1 | 0xf0;
;
	lda     _temp1
	ora     #$F0
	sta     _eject_L
;
; temp3 = Generic.y; // y top
;
	lda     _Generic+1
	sta     _temp3
;
; eject_U = temp3 | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if(L_R_switch) temp3 += 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L0796
	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bg_collision_sub();
;
L0796:	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L09CB
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp5 += Generic.width;
;
L09CB:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; eject_R = (temp1 + 1) & 0x0f;
;
	lda     _temp1
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L09CC
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp3 = Generic.y + Generic.height; //y bottom
;
L09CC:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp3
;
; if(L_R_switch) temp3 -= 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L09CD
	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; eject_D = (temp3 + 1) & 0x0f;
;
L09CD:	lda     _temp3
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(temp3 >= 0xf0) return;
;
	lda     _temp3
	cmp     #$F0
	bcs     L07CE
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L09CE
;
; ++collision_R;
;
	inc     _collision_R
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
L09CE:	lda     _collision
	and     #$C0
	beq     L07BE
;
; ++collision_D;
;
	inc     _collision_D
;
; temp1 = temp6 & 0xff; // low byte x
;
L07BE:	lda     _temp6
	sta     _temp1
;
; temp2 = temp6 >> 8; // high byte x
;
	lda     _temp6+1
	sta     _temp2
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L09CF
;
; ++collision_L;
;
	inc     _collision_L
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
L09CF:	lda     _collision
	and     #$C0
	beq     L09D0
;
; ++collision_D;
;
	inc     _collision_D
;
; if((temp3 & 0x0f) > 3) collision_D = 0; // for platforms, only collide with the top 3 pixels
;
L09D0:	lda     _temp3
	and     #$0F
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L07D1
	eor     #$80
L07D1:	bpl     L07CE
	lda     #$00
	sta     _collision_D
;
; }
;
L07CE:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$20
	bcc     L07ED
	inx
L07ED:	inx
	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; set_data_pointer(Rooms[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L09D4
	inx
	clc
L09D4:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch(scroll_count){
;
	lda     _scroll_count
;
; }
;
	beq     L07FB
	cmp     #$01
	beq     L0814
	cmp     #$02
	jeq     L082E
	jmp     L0847
;
; address = get_ppu_addr(nt, x, 0);
;
L07FB:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L09D9
;
; address = get_ppu_addr(nt, x, 0x40);
;
L0814:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L09D9
;
; address = get_ppu_addr(nt, x, 0x80);
;
L082E:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L09D9
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L0847:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L09D9:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; room = ((scroll_x >> 8) +1); //high byte = room, one to the right
;
	lda     _scroll_x+1
	clc
	adc     #$01
	sta     _room
;
; map = room & 1; //even or odd?
;
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L086B
;
; memcpy (c_map, Rooms[room], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _room
	asl     a
	bcc     L09DC
	inx
	clc
L09DC:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy
;
; memcpy (c_map2, Rooms[room], 240);
;
L086B:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	jsr     pushax
	ldx     #$00
	lda     _room
	asl     a
	bcc     L09DD
	inx
	clc
L09DD:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp2&1; // high byte
;
	lda     _temp2
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L07DB
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
;
; else{
;
	jmp     L09DF
;
; collision = c_map2[coordinates];
;
L07DB:	ldy     _coordinates
	lda     _c_map2,y
L09DF:	sta     _collision
;
; collision = is_solid[collision];
;
	ldy     _collision
	lda     _is_solid,y
	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_check_low (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_check_low: near

.segment	"CODE"

;
; collision_D = 0;
;
	lda     #$00
	sta     _collision_D
;
; temp5 = Generic.x + scroll_x;    //left
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
	pla
	sta     _temp5
;
; temp1 = temp5 & 0xff; //low byte
;
	sta     _temp1
;
; temp2 = temp5 >> 8; //high byte
;
	lda     _temp5+1
	sta     _temp2
;
; temp3 = Generic.y + Generic.height + 1; // bottom
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	bcc     L09E2
	clc
L09E2:	adc     #$01
	sta     _temp3
;
; if(temp3 >= 0xf0) return;
;
	cmp     #$F0
	bcs     L0896
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
	lda     _collision
	and     #$C0
	beq     L09E3
;
; ++collision_D;
;
	inc     _collision_D
;
; temp5 += Generic.width;
;
L09E3:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = temp5 & 0xff; //low byte
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; //high byte
;
	lda     _temp5+1
	sta     _temp2
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
	lda     _collision
	and     #$C0
	beq     L09E4
;
; ++collision_D;
;
	inc     _collision_D
;
; if((temp3 & 0x0f) > 3) collision_D = 0; // for platforms, only collide with the top 3 pixels
;
L09E4:	lda     _temp3
	and     #$0F
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0899
	eor     #$80
L0899:	bpl     L0896
	lda     #$00
	sta     _collision_D
;
; }
;
L0896:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ get_position (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_position: near

.segment	"CODE"

;
; temp5 -= scroll_x;
;
	lda     _scroll_x
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_x+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;
;
	lda     _temp5
	ldx     #$00
	sta     _temp_x
;
; if(high_byte(temp5)) return 0;
;
	lda     _temp5+1
	beq     L09E5
	txa
	rts
;
; return 1;
;
L09E5:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_moves (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_moves: near

.segment	"CODE"

;
; temp1 = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _temp1
;
; if(get_frame_count() & 0x01) return; // half speed
;
	jsr     _get_frame_count
	and     #$01
	beq     L09E9
;
; }
;
	rts
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L09E9:	sta     _index
L09E7:	lda     _index
	cmp     #$10
	bcc     L09EA
;
; }
;
	rts
;
; if(enemy_active[index]){
;
L09EA:	ldy     _index
	lda     _enemy_active,y
	jeq     L09E8
;
; if(enemy_x[index] > temp1){
;
	ldy     _index
	lda     _enemy_x,y
	sec
	sbc     _temp1
	bcc     L0761
	beq     L0761
;
; if(enemy_actual_x[index] == 0) --enemy_room[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L0765
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L076B
	inx
L076B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_actual_x[index];
;
L0765:	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L076E
	inx
L076E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
;
; else if(enemy_x[index] < temp1){
;
	jmp     L09E6
L0761:	ldy     _index
	lda     _enemy_x,y
	cmp     _temp1
	bcs     L09E8
;
; ++enemy_actual_x[index];
;
	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L0776
	inx
L0776:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if(enemy_actual_x[index] == 0) ++enemy_room[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L09E8
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L077D
	inx
L077D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
L09E6:	sta     (ptr1),y
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L09E8:	inc     _index
	jmp     L09E7

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collisions: near

.segment	"CODE"

;
; Generic.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	lda     #$0B
	sta     _Generic+3
;
; Generic2.width = COIN_WIDTH;
;
	lda     #$07
	sta     _Generic2+2
;
; Generic2.height = COIN_HEIGHT;
;
	lda     #$0B
	sta     _Generic2+3
;
; for(index = 0; index < MAX_COINS; ++index){
;
	lda     #$00
	sta     _index
L09EB:	lda     _index
	cmp     #$10
	bcs     L09ED
;
; if(coin_active[index]){
;
	ldy     _index
	lda     _coin_active,y
	beq     L09EC
;
; Generic2.x = coin_x[index];
;
	ldy     _index
	lda     _coin_x,y
	sta     _Generic2
;
; Generic2.y = coin_y[index];
;
	ldy     _index
	lda     _coin_y,y
	sta     _Generic2+1
;
; if(check_collision(&Generic, &Generic2)){
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L09EC
;
; coin_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _coin_y,y
;
; sfx_play(SFX_DING, 0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; ++coins;
;
	inc     _coins
;
; for(index = 0; index < MAX_COINS; ++index){
;
L09EC:	inc     _index
	jmp     L09EB
;
; Generic2.width = ENEMY_WIDTH;
;
L09ED:	lda     #$0D
	sta     _Generic2+2
;
; Generic2.height = ENEMY_HEIGHT;
;
	sta     _Generic2+3
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
	lda     #$00
	sta     _index
L09EE:	lda     _index
	cmp     #$10
	bcs     L08D0
;
; if(enemy_active[index]){
;
	ldy     _index
	lda     _enemy_active,y
	beq     L09EF
;
; Generic2.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _Generic2
;
; Generic2.y = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _Generic2+1
;
; if(check_collision(&Generic, &Generic2)){
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L09EF
;
; enemy_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; sfx_play(SFX_NOISE, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if(coins) --coins;
;
	lda     _coins
	beq     L09EF
	dec     _coins
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L09EF:	inc     _index
	jmp     L09EE
;
; }
;
L08D0:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_spr_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_spr_objects: near

.segment	"CODE"

;
; for(index = 0; index < MAX_COINS; ++index){
;
	lda     #$00
	sta     _index
L09F2:	lda     _index
	cmp     #$10
	bcs     L09F4
;
; coin_active[index] = 0; //default to zero
;
	ldy     _index
	lda     #$00
	sta     _coin_active,y
;
; if(coin_y[index] != TURN_OFF){
;
	ldy     _index
	lda     _coin_y,y
	cmp     #$FF
	beq     L09F3
;
; temp5 = (coin_room[index] << 8) + coin_actual_x[index];
;
	ldy     _index
	lda     _coin_room,y
	sta     ptr1+1
	ldy     _index
	lda     _coin_actual_x,y
	clc
	adc     #$00
	ldx     ptr1+1
	bcc     L09F0
	inx
L09F0:	sta     _temp5
	stx     _temp5+1
;
; coin_active[index] = get_position();
;
	lda     #<(_coin_active)
	ldx     #>(_coin_active)
	clc
	adc     _index
	bcc     L090B
	inx
L090B:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
;
; coin_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _coin_x,y
;
; for(index = 0; index < MAX_COINS; ++index){
;
L09F3:	inc     _index
	jmp     L09F2
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L09F4:	lda     #$00
	sta     _index
L09F5:	lda     _index
	cmp     #$10
	bcs     L0912
;
; enemy_active[index] = 0; //default to zero
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; if(enemy_y[index] != TURN_OFF){
;
	ldy     _index
	lda     _enemy_y,y
	cmp     #$FF
	beq     L09F6
;
; temp5 = (enemy_room[index] << 8) + enemy_actual_x[index];
;
	ldy     _index
	lda     _enemy_room,y
	sta     ptr1+1
	ldy     _index
	lda     _enemy_actual_x,y
	clc
	adc     #$00
	ldx     ptr1+1
	bcc     L09F1
	inx
L09F1:	sta     _temp5
	stx     _temp5+1
;
; enemy_active[index] = get_position();
;
	lda     #<(_enemy_active)
	ldx     #>(_enemy_active)
	clc
	adc     _index
	bcc     L092A
	inx
L092A:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
;
; enemy_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _enemy_x,y
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L09F6:	inc     _index
	jmp     L09F5
;
; }
;
L0912:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_obj_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_obj_init: near

.segment	"CODE"

;
; pointer = level_1_coins;
;
	lda     #>(_level_1_coins)
	sta     _pointer+1
	lda     #<(_level_1_coins)
	sta     _pointer
;
; for(index = 0,index2 = 0;index < MAX_COINS; ++index){
;
	lda     #$00
	sta     _index
	sta     _index2
L09FF:	lda     _index
	cmp     #$10
	bcs     L0A00
;
; coin_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _coin_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_y,y
;
; if(temp1 == TURN_OFF) break;
;
	lda     _temp1
	cmp     #$FF
	beq     L0A00
;
; ++index2;
;
	inc     _index2
;
; coin_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _coin_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; for(index = 0,index2 = 0;index < MAX_COINS; ++index){
;
	inc     _index
	jmp     L09FF
;
; for(++index;index < MAX_COINS; ++index){
;
L0A00:	inc     _index
	lda     _index
	cmp     #$10
	bcs     L096A
;
; coin_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _coin_y,y
;
; for(++index;index < MAX_COINS; ++index){
;
	jmp     L0A00
;
; pointer = level_1_enemies;
;
L096A:	lda     #>(_level_1_enemies)
	sta     _pointer+1
	lda     #<(_level_1_enemies)
	sta     _pointer
;
; for(index = 0,index2 = 0;index < MAX_ENEMY; ++index){
;
	lda     #$00
	sta     _index
	sta     _index2
L0A01:	lda     _index
	cmp     #$10
	bcs     L0A02
;
; enemy_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_y,y
;
; if(temp1 == TURN_OFF) break;
;
	lda     _temp1
	cmp     #$FF
	beq     L0A02
;
; ++index2;
;
	inc     _index2
;
; enemy_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; for(index = 0,index2 = 0;index < MAX_ENEMY; ++index){
;
	inc     _index
	jmp     L0A01
;
; for(++index;index < MAX_ENEMY; ++index){
;
L0A02:	inc     _index
	lda     _index
	cmp     #$10
	bcs     L09A3
;
; enemy_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; for(++index;index < MAX_ENEMY; ++index){
;
	jmp     L0A02
;
; }
;
L09A3:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; song = SONG_GAME;
;
	lda     #$00
	sta     _song
;
; music_play(song);
;
	jsr     _music_play
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once
;
	jsr     _set_vram_buffer
;
; load_room();
;
	jsr     _load_room
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; while(game_mode == MODE_GAME){
;
	jmp     L0A03
;
; ppu_wait_nmi();
;
L05AF:	jsr     _ppu_wait_nmi
;
; set_music_speed(8);
;
	lda     #$08
	jsr     _set_music_speed
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; movement();
;
	jsr     _movement
;
; check_spr_objects(); // see which objects are on screen
;
	jsr     _check_spr_objects
;
; sprite_collisions();
;
	jsr     _sprite_collisions
;
; enemy_moves();
;
	jsr     _enemy_moves
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if(pad1_new & PAD_START){
;
	lda     _pad1_new
	and     #$10
	beq     L0A03
;
; game_mode = MODE_PAUSE;
;
	lda     #$01
	sta     _game_mode
;
; song = SONG_PAUSE;
;
	sta     _song
;
; music_play(song);
;
	jsr     _music_play
;
; color_emphasis(COL_EMP_DARK);
;
	lda     #$E0
	jsr     _color_emphasis
;
; while(game_mode == MODE_GAME){
;
L0A03:	lda     _game_mode
	beq     L05AF
;
; while(game_mode == MODE_PAUSE){
;
	jmp     L0A04
;
; ppu_wait_nmi();
;
L05D0:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if(pad1_new & PAD_START){
;
	lda     _pad1_new
	and     #$10
	beq     L0A04
;
; game_mode = MODE_GAME;
;
	lda     #$00
	sta     _game_mode
;
; song = SONG_GAME;
;
	sta     _song
;
; music_play(song);
;
	jsr     _music_play
;
; color_emphasis(COL_EMP_NORMAL);
;
	lda     #$00
	jsr     _color_emphasis
;
; while(game_mode == MODE_PAUSE){
;
L0A04:	lda     _game_mode
	cmp     #$01
	beq     L05D0
;
; while (1){
;
	jmp     L0A03

.endproc

